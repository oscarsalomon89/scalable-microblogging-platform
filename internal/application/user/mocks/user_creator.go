// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	user "github.com/oscarsalomon89/scalable-microblogging-platform/internal/application/user"
	mock "github.com/stretchr/testify/mock"
)

// UserCreator is an autogenerated mock type for the UserCreator type
type UserCreator struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, _a1
func (_m *UserCreator) CreateUser(ctx context.Context, _a1 *user.User) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.User) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FollowUser provides a mock function with given fields: ctx, followerID, followeeID
func (_m *UserCreator) FollowUser(ctx context.Context, followerID string, followeeID string) error {
	ret := _m.Called(ctx, followerID, followeeID)

	if len(ret) == 0 {
		panic("no return value specified for FollowUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, followerID, followeeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnfollowUser provides a mock function with given fields: ctx, followerID, followeeID
func (_m *UserCreator) UnfollowUser(ctx context.Context, followerID string, followeeID string) error {
	ret := _m.Called(ctx, followerID, followeeID)

	if len(ret) == 0 {
		panic("no return value specified for UnfollowUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, followerID, followeeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserCreator creates a new instance of UserCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserCreator {
	mock := &UserCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
