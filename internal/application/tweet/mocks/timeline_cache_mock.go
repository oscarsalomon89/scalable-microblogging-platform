// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	tweet "github.com/oscarsalomon89/scalable-microblogging-platform/internal/application/tweet"
	mock "github.com/stretchr/testify/mock"
)

// TimelineCache is an autogenerated mock type for the TimelineCache type
type TimelineCache struct {
	mock.Mock
}

// GetTimeline provides a mock function with given fields: ctx, userID
func (_m *TimelineCache) GetTimeline(ctx context.Context, userID string) ([]tweet.Tweet, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetTimeline")
	}

	var r0 []tweet.Tweet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]tweet.Tweet, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []tweet.Tweet); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tweet.Tweet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvalidateTimeline provides a mock function with given fields: ctx, userID
func (_m *TimelineCache) InvalidateTimeline(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateTimeline")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetTimeline provides a mock function with given fields: ctx, userID, tweets
func (_m *TimelineCache) SetTimeline(ctx context.Context, userID string, tweets []tweet.Tweet) error {
	ret := _m.Called(ctx, userID, tweets)

	if len(ret) == 0 {
		panic("no return value specified for SetTimeline")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []tweet.Tweet) error); ok {
		r0 = rf(ctx, userID, tweets)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTimelineCache creates a new instance of TimelineCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTimelineCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *TimelineCache {
	mock := &TimelineCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
