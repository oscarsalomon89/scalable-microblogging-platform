services:
  twitterapp:
    container_name: "twitterapp"
    build: .
    image: "twitterapp:${APP_VERSION}"
    ports:
      - "8080:8080"
    environment:
      - WEB_SERVER_PORT=8080
      - GO_ENVIRONMENT=beta
      - APP_VERSION=1.0
      - API_VERSION=v1
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=twitterdb
      - DB_USER=admin
      - DB_PASS=admin
      - CACHE_ADDRESS=redis:6379
      - CACHE_PASSWORD=
      - SSL_MODE=disable
    depends_on:
      - postgres
      - redis
      - migrate
    networks:
      - twitter-network
    restart: on-failure

  postgres:
    image: postgres:16.3
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=twitterdb
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - twitter-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d twitterdb"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  migrate:
    image: migrate/migrate
    container_name: migrate
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./migrations:/migrations
    entrypoint:
      [
        "migrate",
        "-path",
        "/migrations",
        "-database",
        "postgres://admin:admin@postgres:5432/twitterdb?sslmode=disable",
        "up",
      ]
    networks:
      - twitter-network

  redis:
    image: redis:8.0
    container_name: redis
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=
    command: ["redis-server", "--requirepass", ""]
    networks:
      - twitter-network
    restart: unless-stopped
    volumes:
      - redisdata:/data

networks:
  twitter-network:
    driver: bridge

volumes:
  pgdata:
  redisdata:
